#Условия

#Boolean - 3 состояния

b = bool #условия это выражение, которое вернет специальный тип данных bool - логический тип данных

#Boolean может быть =
t = True #Boolean тип
f = False #Boolean тип
n = None #отсутствие значений, может используется как False

if True: #если тру (всегда выполнится в данном случае)
    print("Я выполняюсь!")#то выполняется это условие

if False: #если фолс (никогда не выполнится в данном случае)
    print("Я никогда не выполняюсь")#то выполняется это условие

#явный пример
#https://http.cat/

code = 1000 #пример кода ответа

if 200 <= code < 400: #если код находится в диапазоне больше или = 200, но меньше 400, то ок (т.е. от 400 коды плохие)
    print('проверка пройдена, хороший ответ!')
else: #иначе
    print('Плохой код ответа')

#также есть elif - продолжение указаний условий
if 200 <= code < 400: #если код находится в диапазоне больше или = 200, но меньше 400, то ок (т.е. от 400 коды плохие)
    print('проверка пройдена, хороший ответ!')
elif 400<= code <600: ##если код находится в диапазоне больше или = 400, но меньше 600, то указываем условие, что это плохой ответ
    print('Плохой код ответа')
else:#иначе, если не прошли по 1 и 2 условию
    print('какой-то странный код')

#Пустые строчки - false

user_list = []
if user_list == []: #если наш список пустой...
    pass

if user_list: #если наш список не пустой...
    pass

#------------

items_count = 0
if items_count == 0: #если наше значение =0
    pass

if items_count: #если наше значение не =0
    pass

#------------

if 'abc' == '': #если наша строчка пустая
    pass

if 'abc': #если наша строчка не пустая
    pass

#Пример, как происходит под капотом, что для питон True и False------------
#ПОЛУЧАЕТСЯ, ЧТО ПУСТЫЕ ЗНАЧЕНИЯ И 0 это FALSE, остальные true
#когда мы пишем if, питон приобразовывает значения так:
print(bool(100))
print(bool(-100))
print(bool(0))

print(bool("abc"))
print(bool(""))

print(bool([]))
print(bool([1, 2, 3]))
print(bool(False))
print(bool([[]])) #тут TRUE, потому что в списке есть список